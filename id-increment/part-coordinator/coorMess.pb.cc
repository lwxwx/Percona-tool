// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coorMess.proto

#include "coorMess.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace CoorMessage {
class CoorRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CoorRequest>
      _instance;
} _CoorRequest_default_instance_;
class CoorResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CoorResponse>
      _instance;
} _CoorResponse_default_instance_;
}  // namespace CoorMessage
namespace protobuf_coorMess_2eproto {
static void InitDefaultsCoorRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CoorMessage::_CoorRequest_default_instance_;
    new (ptr) ::CoorMessage::CoorRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CoorMessage::CoorRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CoorRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCoorRequest}, {}};

static void InitDefaultsCoorResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CoorMessage::_CoorResponse_default_instance_;
    new (ptr) ::CoorMessage::CoorResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CoorMessage::CoorResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CoorResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCoorResponse}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CoorRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CoorResponse.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CoorMessage::CoorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CoorMessage::CoorRequest, m_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CoorMessage::CoorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CoorMessage::CoorResponse, part_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CoorMessage::CoorResponse, s_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CoorMessage::CoorRequest)},
  { 6, -1, sizeof(::CoorMessage::CoorResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::CoorMessage::_CoorRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CoorMessage::_CoorResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "coorMess.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016coorMess.proto\022\013CoorMessage\"\033\n\013CoorReq"
      "uest\022\014\n\004m_id\030\001 \001(\003\"-\n\014CoorResponse\022\017\n\007pa"
      "rt_id\030\001 \001(\005\022\014\n\004s_id\030\002 \001(\0032N\n\013CoorService"
      "\022\?\n\010CoorMess\022\030.CoorMessage.CoorRequest\032\031"
      ".CoorMessage.CoorResponseB\003\200\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 198);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "coorMess.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_coorMess_2eproto
namespace CoorMessage {

// ===================================================================

void CoorRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoorRequest::kMIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoorRequest::CoorRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_coorMess_2eproto::scc_info_CoorRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoorMessage.CoorRequest)
}
CoorRequest::CoorRequest(const CoorRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  m_id_ = from.m_id_;
  // @@protoc_insertion_point(copy_constructor:CoorMessage.CoorRequest)
}

void CoorRequest::SharedCtor() {
  m_id_ = GOOGLE_LONGLONG(0);
}

CoorRequest::~CoorRequest() {
  // @@protoc_insertion_point(destructor:CoorMessage.CoorRequest)
  SharedDtor();
}

void CoorRequest::SharedDtor() {
}

void CoorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CoorRequest::descriptor() {
  ::protobuf_coorMess_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coorMess_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CoorRequest& CoorRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_coorMess_2eproto::scc_info_CoorRequest.base);
  return *internal_default_instance();
}


void CoorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CoorMessage.CoorRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool CoorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoorMessage.CoorRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 m_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoorMessage.CoorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoorMessage.CoorRequest)
  return false;
#undef DO_
}

void CoorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoorMessage.CoorRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_id = 1;
  if (this->m_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CoorMessage.CoorRequest)
}

::google::protobuf::uint8* CoorRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CoorMessage.CoorRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_id = 1;
  if (this->m_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CoorMessage.CoorRequest)
  return target;
}

size_t CoorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoorMessage.CoorRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 m_id = 1;
  if (this->m_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->m_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoorRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CoorMessage.CoorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CoorRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CoorRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CoorMessage.CoorRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CoorMessage.CoorRequest)
    MergeFrom(*source);
  }
}

void CoorRequest::MergeFrom(const CoorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoorMessage.CoorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.m_id() != 0) {
    set_m_id(from.m_id());
  }
}

void CoorRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CoorMessage.CoorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoorRequest::CopyFrom(const CoorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoorMessage.CoorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoorRequest::IsInitialized() const {
  return true;
}

void CoorRequest::Swap(CoorRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoorRequest::InternalSwap(CoorRequest* other) {
  using std::swap;
  swap(m_id_, other->m_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CoorRequest::GetMetadata() const {
  protobuf_coorMess_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coorMess_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CoorResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoorResponse::kPartIdFieldNumber;
const int CoorResponse::kSIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoorResponse::CoorResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_coorMess_2eproto::scc_info_CoorResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoorMessage.CoorResponse)
}
CoorResponse::CoorResponse(const CoorResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_id_, &from.s_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&part_id_) -
    reinterpret_cast<char*>(&s_id_)) + sizeof(part_id_));
  // @@protoc_insertion_point(copy_constructor:CoorMessage.CoorResponse)
}

void CoorResponse::SharedCtor() {
  ::memset(&s_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&part_id_) -
      reinterpret_cast<char*>(&s_id_)) + sizeof(part_id_));
}

CoorResponse::~CoorResponse() {
  // @@protoc_insertion_point(destructor:CoorMessage.CoorResponse)
  SharedDtor();
}

void CoorResponse::SharedDtor() {
}

void CoorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CoorResponse::descriptor() {
  ::protobuf_coorMess_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coorMess_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CoorResponse& CoorResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_coorMess_2eproto::scc_info_CoorResponse.base);
  return *internal_default_instance();
}


void CoorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CoorMessage.CoorResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&part_id_) -
      reinterpret_cast<char*>(&s_id_)) + sizeof(part_id_));
  _internal_metadata_.Clear();
}

bool CoorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoorMessage.CoorResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 part_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &part_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 s_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &s_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoorMessage.CoorResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoorMessage.CoorResponse)
  return false;
#undef DO_
}

void CoorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoorMessage.CoorResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 part_id = 1;
  if (this->part_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->part_id(), output);
  }

  // int64 s_id = 2;
  if (this->s_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->s_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CoorMessage.CoorResponse)
}

::google::protobuf::uint8* CoorResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CoorMessage.CoorResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 part_id = 1;
  if (this->part_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->part_id(), target);
  }

  // int64 s_id = 2;
  if (this->s_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->s_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CoorMessage.CoorResponse)
  return target;
}

size_t CoorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoorMessage.CoorResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 s_id = 2;
  if (this->s_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->s_id());
  }

  // int32 part_id = 1;
  if (this->part_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->part_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoorResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CoorMessage.CoorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CoorResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CoorResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CoorMessage.CoorResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CoorMessage.CoorResponse)
    MergeFrom(*source);
  }
}

void CoorResponse::MergeFrom(const CoorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoorMessage.CoorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s_id() != 0) {
    set_s_id(from.s_id());
  }
  if (from.part_id() != 0) {
    set_part_id(from.part_id());
  }
}

void CoorResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CoorMessage.CoorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoorResponse::CopyFrom(const CoorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoorMessage.CoorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoorResponse::IsInitialized() const {
  return true;
}

void CoorResponse::Swap(CoorResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoorResponse::InternalSwap(CoorResponse* other) {
  using std::swap;
  swap(s_id_, other->s_id_);
  swap(part_id_, other->part_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CoorResponse::GetMetadata() const {
  protobuf_coorMess_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coorMess_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

CoorService::~CoorService() {}

const ::google::protobuf::ServiceDescriptor* CoorService::descriptor() {
  protobuf_coorMess_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_coorMess_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* CoorService::GetDescriptor() {
  return descriptor();
}

void CoorService::CoorMess(::google::protobuf::RpcController* controller,
                         const ::CoorMessage::CoorRequest*,
                         ::CoorMessage::CoorResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CoorMess() not implemented.");
  done->Run();
}

void CoorService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_coorMess_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      CoorMess(controller,
             ::google::protobuf::down_cast<const ::CoorMessage::CoorRequest*>(request),
             ::google::protobuf::down_cast< ::CoorMessage::CoorResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& CoorService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CoorMessage::CoorRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& CoorService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CoorMessage::CoorResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

CoorService_Stub::CoorService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
CoorService_Stub::CoorService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
CoorService_Stub::~CoorService_Stub() {
  if (owns_channel_) delete channel_;
}

void CoorService_Stub::CoorMess(::google::protobuf::RpcController* controller,
                              const ::CoorMessage::CoorRequest* request,
                              ::CoorMessage::CoorResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace CoorMessage
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CoorMessage::CoorRequest* Arena::CreateMaybeMessage< ::CoorMessage::CoorRequest >(Arena* arena) {
  return Arena::CreateInternal< ::CoorMessage::CoorRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CoorMessage::CoorResponse* Arena::CreateMaybeMessage< ::CoorMessage::CoorResponse >(Arena* arena) {
  return Arena::CreateInternal< ::CoorMessage::CoorResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
